from copy import copy

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.web_app import check_webapp_signature, safe_parse_webapp_init_data
from aiohttp import web
from aiohttp.web_request import Request
from aiohttp.web_response import json_response

import db
import sheets.worksheets
from bot.inline_keyboards import request_menu, user_request, pay_keyboard
from bot.utils import SPLITTER
from bot.utils import parse_request, prep_md
from bot.webapp.templates import load_from_base_template
from sheets.sheets import update as sheets_update

user_state = {}

routes = web.RouteTableDef()

from functools import wraps


def handle_errors(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except ValueError:
            request: Request = args[0]
            return json_response({"ok": False, "err": "Unauthorized"}, status=401)

    return wrapper


@routes.get('/approve_request')
async def bot_setup_handler(request: Request):
    return web.Response(text=load_from_base_template('approve_request.html'), content_type='text/html')


@routes.get('/decline_request')
async def bot_setup_handler(request: Request):
    return web.Response(text=load_from_base_template('decline_request.html'), content_type='text/html')


@routes.get('/request')
async def bot_setup_handler(request: Request):
    return web.Response(text=load_from_base_template('request.html'), content_type='text/html')


@routes.post('/checkData')
async def check_data_handler(request: Request):
    bot: Bot = request.app["bot"]

    data = await request.post()
    if check_webapp_signature(bot.token, data["_auth"]):
        return json_response({"ok": True})
    return json_response({"ok": False, "err": "Unauthorized"}, status=401)


@routes.post('/initApp')
async def init_app(request: Request):
    bot: Bot = request.app["bot"]
    data = await request.post()
    user_id = data['_unsafe_data[user][id]']
    if check_webapp_signature(bot.token, data["_auth"]):
        return json_response({'response': {"ok": True}})

    return json_response({"ok": False, "err": "Unauthorized"}, status=401)


@routes.post('/getObjects')
@handle_errors
async def get_objects_handler(request: Request):
    bot: Bot = request.app["bot"]
    data = await request.post()
    web_app_init_data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])
    response = dict(objects=sheets.worksheets.objects.get(web_app_init_data.user.username))
    return json_response(response, status=200)


@routes.post('/sendRequest')
@handle_errors
async def send_request_handler(r: Request):
    bot: Bot = r.app["bot"]
    data = await r.post()
    web_app_init_data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])
    request = db.requests.Request(
        web_app_init_data.user.username,
        web_app_init_data.user.id,
        data['request[object]'],
        data['request[counterparty]'],
        data['request[money]'],
        data['request[comment]']
    )
    group_id = (await db.data.get()).group_id

    text = parse_request(request)
    message = await bot.send_message(group_id, text, reply_markup=request_menu(request.id),
                                     parse_mode=ParseMode.MARKDOWN_V2)
    request.message_id = message.message_id

    notify_message = await bot.send_message(web_app_init_data.user.id,
                                            f'–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç—É\\.\n{parse_request(request, False)}\n\n‚ùóÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\\!',
                                            parse_mode=ParseMode.MARKDOWN_V2)
    request.private_message_id = notify_message.message_id
    await request.save()
    return json_response(dict(ok=True), status=200)


@routes.post('/editRequest')
@handle_errors
async def edit_request_handler(request: Request):
    bot: Bot = request.app["bot"]
    data = await request.post()
    web_app_init_data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])
    request = await db.requests.get(data['request_id'])
    edited_request = copy(request)
    edited_request.object = data['request[object]']
    edited_request.counterparty = data['request[counterparty]']
    edited_request.money = data['request[money]']
    edited_request.comment = data['request[comment]']
    group_id = (await db.data.get()).group_id
    text = parse_request(request, edited_request=edited_request)
    request = edited_request

    await bot.edit_message_text(text, group_id, request.message_id, text, reply_markup=request_menu(request.id),
                                parse_mode=ParseMode.MARKDOWN_V2)

    # await bot.send_message(group_id, f'‚Ü©Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.',
    #                        reply_to_message_id=request.message_id)

    await request.save()
    try:
        await bot.delete_message(request.from_id, request.edit_message_id)
    except TelegramBadRequest as e:
        if "message can't be deleted for everyone" in e.message:
            await bot.edit_message_text('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É. –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.',
                                        request.from_id, request.edit_message_id)
    return json_response(dict(ok=True), status=200)


@routes.post('/getApprovalSelectors')
@handle_errors
async def get_approval_selectors_handlers(request: Request):
    bot: Bot = request.app["bot"]
    data = await request.post()
    web_app_init_data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])
    owner = sheets.worksheets.owners.get(web_app_init_data.user.username)
    response = dict(
        check=sheets.worksheets.check.get(),
        owners=['–û–ø–ª–∞—á—É —Å–∞–º' if u.name == owner.name else u.name for u in sheets.worksheets.owners.get()],
        owner=sheets.worksheets.owners.get(web_app_init_data.user.username).name
    )
    return json_response(response, status=200)


@routes.post('/approveRequest')
@handle_errors
async def send_message_handler(r: Request):
    bot: Bot = r.app["bot"]
    data = await r.post()

    web_app_init_data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])

    request = await db.requests.get(data['request_id'])

    await bot.delete_message(request.approving_by_user_id, request.approving_by_message_id)

    check = data['check']
    owner = sheets.worksheets.owners.get(request.approving_by_username)
    payer_name = data['payer_name']
    if payer_name == '–û–ø–ª–∞—á—É —Å–∞–º':
        payer_name = owner.name

    if payer_name == owner.name:
        request.status = db.requests.RequestStatuses.APPROVED
    else:
        request.status = db.requests.RequestStatuses.ON_PAYER_CONFIRMATION
    request.check = check
    request.payer_name = payer_name
    await request.save()

    owner_text = f'{prep_md(owner.name)} \\(@{prep_md(owner.username)}\\)'
    group_id = (await db.data.get()).group_id
    text = parse_request(request)

    payer = sheets.worksheets.owners.get(name=payer_name)
    if payer_name == owner.name:
        approved_text = f'‚úÖ *–°–æ–≥–ª–∞—Å–æ–≤–∞–ª* –∏ üíµ *–æ–ø–ª–∞—Ç–∏–ª* {owner_text}\\.'
        text += f'\n{SPLITTER}\nüíº *–û—Ç –∫–æ–≥–æ \\(—é—Ä\\. –ª–∏—Ü–æ/—Å—á—ë—Ç\\):* {check}\n\n{approved_text}'
        await bot.send_message(request.from_id,
                               f'*–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç—É:*\n{parse_request(request, False)}\n{SPLITTER}\nüíº *–û—Ç –∫–æ–≥–æ \\(—é—Ä\\. –ª–∏—Ü–æ/—Å—á—ë—Ç\\):* {check}\n\n{approved_text}',
                               parse_mode=ParseMode.MARKDOWN_V2)
        await bot.delete_message(request.from_id, request.private_message_id)
    else:
        payer_text = f'{prep_md(payer.name)} \\(@{prep_md(payer.username)}\\)'
        text += f'\n{SPLITTER}\nüíº *–û—Ç –∫–æ–≥–æ \\(—é—Ä\\. –ª–∏—Ü–æ/—Å—á—ë—Ç\\):* {check}\n\n‚úÖ *–°–æ–≥–ª–∞—Å–æ–≤–∞–ª* {owner_text}\n\nüíµ{payer_text} –≤ *–ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã*\\. _–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –æ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç –æ–ø–ª–∞—Ç—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å\\._'

        user = sheets.worksheets.users.get(request.from_username)
        user_text = f'{prep_md(user.name)} \\(@{prep_md(user.username)}\\)'
        await bot.send_message(payer.id,
                               f'{owner_text} –æ—Ç–ø—Ä–∞–≤–∏–ª *–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É* –ø–æ –∑–∞—è–≤–∫–µ –æ—Ç {user_text}\\.\n{parse_request(request, False)}\n\nüíº *–û—Ç –∫–æ–≥–æ \\(—é—Ä\\. –ª–∏—Ü–æ/—Å—á—ë—Ç\\):* {check}\n\n‚ùî _–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ –∑–∞—è–≤–∫–µ, –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞–¥–∏—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è\\._',
                               parse_mode=ParseMode.MARKDOWN_V2,
                               reply_markup=pay_keyboard(request.id))

    await bot.edit_message_text(text, group_id, request.message_id, parse_mode=ParseMode.MARKDOWN_V2)

    return json_response({"ok": True}, status=200)


@routes.post('/declineRequest')
@handle_errors
async def send_message_handler(request: Request):
    bot: Bot = request.app["bot"]
    base_url: str = request.app["base_url"]
    data = await request.post()
    web_app_init_data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])
    reason = data['reason']
    group_id = (await db.data.get()).group_id
    request = await db.requests.get(data['request_id'])
    owner = sheets.worksheets.owners.get(request.approving_by_username)
    owner_text = f'{prep_md(owner.name)} \\(@{prep_md(owner.username)}\\)'

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–º–µ–Ω—ã.
    text = parse_request(request)
    text += f'\n\n{SPLITTER}\n*‚ùî –ü—Ä–∏—á–∏–Ω–∞:* {prep_md(reason)}\n\n‚Ü©Ô∏è {owner_text} *–æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å*\\.'
    await bot.edit_message_text(text, group_id, request.message_id, parse_mode=ParseMode.MARKDOWN_V2)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–° —É —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å,
    # —á—Ç–æ–±—ã —É –Ω–µ–≥–æ –Ω–µ –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞—Ç—å —É–∂–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
    await bot.delete_message(request.approving_by_user_id, request.approving_by_message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.
    edit_message = await bot.send_message(request.from_id,
                                          f'–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–∏–ª {owner_text}\\.\n*–ü—Ä–∏—á–∏–Ω–∞:* {prep_md(reason)}\n{parse_request(request, False)}',
                                          reply_markup=user_request(base_url, request.id),
                                          parse_mode=ParseMode.MARKDOWN_V2)

    request.edit_message_id = edit_message.message_id
    await request.save()
    return json_response({'ok': True}, status=200)


@routes.post('/getRequestById')
@handle_errors
async def send_message_handler(request: Request):
    bot: Bot = request.app["bot"]
    data = await request.post()
    web_app_init_data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])
    request = await db.requests.get(data['request_id'])
    response = request.__dict__
    return json_response(response, status=200)


@routes.get('/updateSheets')
async def send_message_handler(request: Request):
    await sheets_update()
