import traceback
from typing import Callable, Any, Awaitable

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.types import Update, BufferedInputFile

from bot.utils import prep_md


async def error_middleware(
        handler: Callable[[Update, dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: dict[str, Any]
) -> Any:
    """
    –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (middleware), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –æ—à–∏–±–∫–∏.

    :param handler: —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å.
    :param event: –æ–±—ä–µ–∫—Ç Update —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏.
    :param data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–º–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(event, data)
    except:
        traceback.print_exc()
        error = traceback.format_exc()
        try:
            await Bot.get_current().send_message(-945645904, f'```\n{prep_md(error)}\n```', parse_mode=ParseMode.MARKDOWN_V2)
        except:
            text_file = BufferedInputFile(error.encode('utf-8'), filename='traceback.txt')
            await Bot.get_current().send_document(-945645904, text_file)
        # –ï—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if event.message:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
            reply_method = event.message.reply if event.message.chat.id < 0 else event.message.answer
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await reply_method('üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        elif event.callback_query:
            # –ï—Å–ª–∏ –±—ã–ª –≤—ã–∑–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await event.callback_query.answer('üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')


async def username_middleware(
        handler: Callable[[Update, dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: dict[str, Any]
) -> Any:
    text = '‚ùóÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ —é–∑–µ—Ä–Ω–µ–π–º.'
    if event.message and not event.message.from_user.username:
        await event.message.reply(text)
        return False
    if event.callback_query and not event.callback_query.from_user.username:
        await event.callback_query.answer(text, show_alert=True)
        return False
    return True
