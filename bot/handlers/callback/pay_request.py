import asyncio

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery

import db
import sheets.worksheets
from bot import router
from bot.callback_data import RequestCompletePayment
from bot.utils import parse_request, SPLITTER, prep_md, delete_message_after_delay
from db.models.requests import RequestStatuses


@router.callback_query(RequestCompletePayment.filter())
async def complete_request_payment(query: CallbackQuery, callback_data: RequestCompletePayment):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞,
    —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ.

    :param query: –æ–±—ä–µ–∫—Ç CallbackQuery, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type query: aiogram.types.CallbackQuery
    :param callback_data: –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    :type callback_data: RequestCompletePayment
    :return: None
    """
    bot: Bot = Bot.get_current()
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
    request = await db.requests.get(callback_data.request_id)
    # –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å (–∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ "–æ–¥–æ–±—Ä–µ–Ω")
    request.status = RequestStatuses.APPROVED
    await request.save()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    data = await db.data.get()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
    owner = sheets.worksheets.owners.get(request.approving_by_username)
    owner_text = f'{prep_md(owner.name)} \\(@{prep_md(owner.username)}\\)'
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–µ
    payer = sheets.worksheets.owners.get(name=request.payer_name)
    payer_text = f'{prep_md(payer.name)} \\(@{prep_md(payer.username)}\\)'

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —É —Å–æ–≥–ª–∞—Å—É—é—â–∏—Ö.
    approved_text = f'‚úÖ *–°–æ–≥–ª–∞—Å–æ–≤–∞–ª:* {owner_text}\\.\n\nüíµ *–û–ø–ª–∞—Ç–∏–ª:* {payer_text}\\.'

    try:
        await bot.edit_message_text(
            f'{parse_request(request)}\n{SPLITTER}\n*üíº –û—Ç –∫–æ–≥–æ \\(—é—Ä\\. –ª–∏—Ü–æ/—Å—á—ë—Ç\\):* {request.check}\n\n{approved_text}',
            data.group_id,
            request.message_id,
            parse_mode=ParseMode.MARKDOWN_V2)
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ.
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 48 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –µ–≥–æ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å.
    text = f'*–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç—É:*\n{parse_request(request, False)}\n{SPLITTER}\nüíº *–û—Ç –∫–æ–≥–æ \\(—é—Ä\\. –ª–∏—Ü–æ/—Å—á—ë—Ç\\):* {request.check}\n\n{approved_text}'
    try:
        await bot.delete_message(request.from_id, request.private_message_id)
        await bot.send_message(request.from_id,
                               text,
                               parse_mode=ParseMode.MARKDOWN_V2)
    except TelegramBadRequest as e:
        if "message can't be deleted for everyone" in e.message:
            await bot.edit_message_text(text, request.from_id, request.private_message_id)
            message = await bot.send_message(request.from_id, '–û–±–Ω–æ–≤–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.',
                                             reply_to_message_id=request.private_message_id)
            asyncio.create_task(delete_message_after_delay(message, 86400))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ.
    await query.answer('‚úÖ –û–ø–ª–∞—á–µ–Ω–æ.', show_alert=True)

    # –£–¥–∞–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—á–µ–Ω–æ", —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –µ—â—ë —Ä–∞–∑.
    try:
        await query.message.delete()
    except TelegramBadRequest as e:
        if "message can't be deleted for everyone" in e.message:
            await query.message.edit_text('‚úÖ –û–ø–ª–∞—á–µ–Ω–æ. –î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.', reply_markup=None)
